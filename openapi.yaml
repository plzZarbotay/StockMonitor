openapi: 3.0.3
info:
  title: StockMonitor - OpenAPI 3.0
  description: |-
    Описание API для бэкенда stockMonitor
  version: 0.0.1
servers:
  - url: http://localhost
tags:
  - name: User
    description: Everything describing user interface
paths:
  /api/v1/auth/check-existance:
    post:
      tags:
        - User
      summary: Check existance of user
      description: Check existance of user by email
      operationId: checkUserExistance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: User email
                  type: string
                  default: test@gmail.com
              required:
                - email
      responses:
        204:
          description: User exists
        404:
          description: User doesn`t exist
  /api/v1/auth/register:
    post:
      tags:
        - User
      summary: Register user
      description: Register user using password and email
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthorize'
        required: true
      responses:
        201:
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/v1/auth/:
    post:
      tags:
        - User
      summary: Authorize or register user
      description: Authorize or register user using password and email
      operationId: authorizeUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthorize'
        required: true
      responses:
        200:
          description: User successfully authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        401:
          description: Unauthorized
  /api/v1/auth/refresh-token:
    post:
      tags:
        - User
      summary: Update tokens
      description: Update tokens using refresh token
      requestBody:
        description: Update tokens using refresh token
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  description: Refresh token
                  type: string
                  default: IG8F&%!pjhUOF!(g
              required:
                - refresh
      responses:
        200:
          description: Token successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/v1/auth/reset_password:
    post:
      tags:
        - User
      summary: Reset password
      description: Reset password using email
      requestBody:
        description: Update tokens using refresh token
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: User email
                  type: string
                  default: mail_kyky@email.ru
              required:
                - email
      responses:
        200:
          description: Password reset successfully requested
        404:
          description: User with email not found
  /api/v1/auth/reset_password/confirm/{uuidUser}/{token}:
    get:
      tags:
        - User
      summary: Authorize user to reset password
      description: Endpoint to authorize reset of password. Endpoint should be called from email link
      parameters:
        - in: path
          name: uuidUser
          required: true
          schema:
            type: string
          example: 3422b448-2460-4fd2-9183-8000de6f8343
        - in: path
          name: token
          required: true
          schema:
            type: string
          example: 3422b448-2460-4fd2-9183-8000de6f8343
  /api/v1/profile/{uuidUser}:
    get:
      tags:
        - User
      summary: Get user`s profile
      description: Get user`s profile if authorized
      parameters:
        - in: path
          name: uuidUser
          required: true
          schema:
            type: string
          example: 3422b448-2460-4fd2-9183-8000de6f8343
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        403:
          description: Access forbidden
      security:
        - AccessApiKey: [ ]
  /api/v1/profile/{user_id}/portfolio:
    get:
      tags:
        - User
      summary: Get user`s portfolio
      description: Get user`s portfolio if authorized
      responses:
        200:
          description: Successful request
        401:
          description: Unauthorized request
        403:
          description: Access forbidden
      security:
        - AccessApiKey: [ ]
    post:
      tags:
        - User
      summary: add tools to portfolio
      description: add tools to portfolio
  /api/v1/market:
    get:
      tags:
        - Search / Analytics
      summary: Get table of stocks
      description: Get stocks data. If passed argument "q", then returns data, based on search query.
      parameters:
        - in: query
          name: q
          required: false
          schema:
            type: string
          example: yandex
      responses:
        200:
          description: Password reset successfully requested
        404:
          description: User with email not found

  /api/v1/market/{tool_id}:
    get:
      tags:
        - Search / Analytics
      summary: get tool info
      description: get detailed tool info
      parameters:
        - in: path
          name: tool_id
          required: true
          schema:
            type: string

components:
  schemas:
    UserAuthorize:
      type: object
      properties:
        email:
          type: string
          default: jonny_young@yahoo.com
        password:
          type: string
          default: hello_i_am_test_password
      required:
        - email
        - password
    TokenResponse:
      type: object
      properties:
        access:
          description: Access token
          type: string
          example: IbyuvtuF!T&f7tDt8f18tF@*t102U)*U!
        refresh:
          description: Refresh token
          type: string
          example: Fouhyasgf1212euy9gY(!2rft102!2fv
    Profile:
      type: object
      properties:
        name:
          description: User name
          type: string
          example: Ibragim
        email:
          description: User email
          type: string
          example: ibragim_hello@yahoo.com
        theme:
          description: Site theme selected by user
          type: string
          enum:
            - light
            - dark
            - colorblind
    Stock:
      type: object
      properties:
        ticker:
          description: Stock ticker
          type: string
          example: YNDX
        shortname:
          description: Stock name
          type: string
          example: Яндекс
        type:
          description: Stock type
          type: string
          example: common_share
  securitySchemes:
    AccessApiKey:
      # Аутентификация - подтверждение личности
      # Авторизация - разрешения того или иного действия
      description: Authorizing access with API key provided by authentification
      type: apiKey
      name: access-key
      in: header
    RefreshApiKey:
      description: Updating access API key using refresh key
      type: apiKey
      name: refresh-key
      in: header
  requestBodies:
    UserAuthorize:
      description: User object to authorize
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserAuthorize'
